{"version":3,"sources":["Redux/Actions.js","Components/BoardComponent.js","Containers/BoardContainer.js","utils/validation.js","Components/Form/InputText/index.js","Components/ConfigurationComponent.js","Containers/ConfigurationContainer.js","App.js","Redux/History.js","Redux/Reducers.js","Redux/Store.js","reportWebVitals.js","index.js"],"names":["Types","setConfig","config","type","Row","styled","div","props","height","width","Cell","background","Button","a","renderTable","boardSize","cellSize","cols","rows","grid","arr","Array","i","length","buildTwoDimensionalArray","j","Math","round","random","drawATable","map","row","cell","BoardComponent","useState","setGrid","generation","onClick","k","setTimeout","startIterations","BoardWrapper","BoardContainer","state","this","setState","Component","validateNumber","input","test","InputWrapper","InputLabel","label","InputText","ValidationText","span","validation","field","value","FormTextInput","labelText","id","placeholder","onChange","htmlFor","name","Form","form","ConfigurationComponent","handleChangeValue","handleSubmit","ConfigurationContainer","e","currentTarget","Number","preventDefault","bind","AppWrapper","App","WebFont","load","google","families","connect","states","dispatch","bindActionCreators","createBrowserHistory","InitialState","store","createStore","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","history","document","getElementById"],"mappings":"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","file":"static/js/main.6645cee3.chunk.js","sourcesContent":["// Define redux action type and export it\nexport const Types = {  \n    SET_CONFIG: 'SET_CONFIG',\n}\n\n// Define an action that will configuration state\nexport const setConfig = config => ({ type: Types.SET_CONFIG, config });","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Row = styled.div`\n    padding: 0;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n`;\n\nconst Cell = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    display: inline-block;\n    width: ${props => props.width};\n    height: ${props => props.height};\n    text-align: center;\n    span {\n        display: inline-block;\n    }\n    ${({ background }) => background && `\n        background-color: #000;\n    `}\n`;\n\nconst Button = styled.a`\n    background-color: #f62459;\n    color: #fff;\n    padding: 10px;\n    margin: 10px 0;\n    display: inline-block;\n    cursor: pointer;\n`;\n\nconst buildTwoDimensionalArray = (cols, rows) => {\n    let arr = new Array(cols);\n    for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(rows); \n    }\n    return arr;\n}\n\nconst renderTable = (boardSize, cellSize) => {\n    const cols = boardSize / cellSize;\n    const rows = boardSize / cellSize;\n    let grid = buildTwoDimensionalArray(cols, rows);\n    for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n            grid[i][j] = Math.round(Math.random());\n        }\n    }\n    return drawATable(cellSize, boardSize, grid);\n}\n\nconst drawATable = (cellSize, boardSize, grid) => {\n    let table = grid.map((row, i) => {\n        return <Row height={`${cellSize}px`} width={`${boardSize}px`} key={i}>{\n            row.map((cell, j) => {\n                return <Cell key={j} background={grid[i][j] === 1} width={`${cellSize}px`} height={`${cellSize}px`}></Cell>;\n            })\n        }</Row>\n    });\n    return table;\n}\n\nconst startIterations = (setGrid, generation, boardSize, cellSize) => {\n    for (let k = 0; k < generation; k++) {\n        (function() {\n            let j = k;\n            setTimeout(() => {\n                setGrid(renderTable(boardSize, cellSize));\n            }, 1000 * (j + 1));\n        })();\n    }\n};\n\nconst BoardComponent = ({config}) => {\n    const [grid, setGrid] = useState([]);\n    const {\n        boardSize,\n        cellSize,\n        generation\n    } = config;\n    return <Fragment>\n        <Button onClick={() => startIterations(setGrid, generation, boardSize, cellSize)}>\n            Start Iteration\n        </Button>\n        {grid && grid.length > 0 ? grid : renderTable(boardSize, cellSize)}\n    </Fragment>;\n}\n\nexport default BoardComponent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport BoardComponent from '../Components/BoardComponent';\n\nconst BoardWrapper = styled.div`\n    width: 400px;\n    height: 400px;\n    padding: 0;\n`;\n\nclass BoardContainer extends Component {\n\n    state = {\n        generation: 0,\n        cellSize: 0,\n        boardSize: 0\n    }\n    \n    componentDidMount(){\n        this.setState(this.props.config)\n    }\n\n    render() {\n        return <BoardWrapper>\n                    { this.state.boardSize && \n                        <BoardComponent \n                            config={this.props.config}\n                        /> \n                    }\n                </BoardWrapper>;\n    }\n    \n}\n\n// Validate Component Props \nBoardContainer.propTypes = {\n    config: PropTypes.object,\n    setConfig: PropTypes.func\n};\n\n\nexport default BoardContainer;","export const validateNumber = input => {\n    const re = /^[1-9]\\d*$/;\n    return re.test(input);\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { validateNumber } from '../../../utils/validation';\n\nconst InputWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 15px 0;\n    width: 200px;\n`;\n\nconst InputLabel = styled.label`\n    font-size: 14px;\n    font-weight: 500;\n    margin: 5px 0;\n    display: inline-block;\n`;\n\nconst InputText = styled.input`\n    background: rgb(255, 255, 255);\n    border-radius: 2px;\n    border: 1px solid rgb(217, 217, 217);\n    height: 32px;\n    padding: 0 6px;\n`;\n\nconst ValidationText = styled.span`\n    color: #900;\n    display: inline-block;\n    margin: 8px 0;\n`;\n\nconst validation = (field, value) => {\n    if(field === 'generation' && !validateNumber(value)) {\n        return <ValidationText>Invalid generation</ValidationText>\n    }\n    if(field === 'cellSize' && !validateNumber(value)) {\n        return <ValidationText>Invalid cell size</ValidationText>\n    }\n    if(field === 'boardSize' && !validateNumber(value)) {\n        return <ValidationText>Invalid board size</ValidationText>\n    }\n    return ``;\n}\n\nconst FormTextInput = props => {\n    const {\n        labelText,\n        id,\n        placeholder,\n        value,\n        onChange\n    } = props;\n    return (\n        <InputWrapper>\n            <InputLabel htmlFor={id}>{labelText}</InputLabel>\n            <InputText \n                type=\"number\" \n                onChange={onChange}\n                value={value}\n                placeholder={placeholder} \n                id={id} \n                name={id}\n            />\n            {validation(id, value)}\n        </InputWrapper>\n    );\n};\n\nFormTextInput.propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    id: PropTypes.string,\n    labelText: PropTypes.string\n};\n\nexport default FormTextInput;","import React from 'react';\nimport TextInput from './Form/InputText';\nimport styled from 'styled-components';\n\nconst Form = styled.form`\n    padding: 0;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n`;\n\nconst Button = styled.input`\n    padding: 10px;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n    background-color: #000;\n    color: #fff;\n    border: none;\n    cursor: pointer;\n    &:focus {\n        outline:0;\n        outline: none;\n    }\n`;\n\nconst ConfigurationComponent = ({state, handleChangeValue, handleSubmit}) => {\n    return <Form>\n        <TextInput\n            labelText=\"Generations (1-8):\"\n            id=\"generation\"\n            value={state.generation}\n            name=\"generation\"\n            onChange={handleChangeValue}\n        />\n        <TextInput\n            labelText=\"Cell Size\"\n            id=\"cellSize\"\n            value={state.cellSize}\n            name=\"cellSize\"\n            onChange={handleChangeValue}\n        />\n        <TextInput\n            labelText=\"Board Size:\"\n            id=\"boardSize\"\n            value={state.boardSize}\n            name=\"boardSize\"\n            onChange={handleChangeValue}\n        />\n        <Button id=\"submit\" value=\"Save Settings\" onClick={handleSubmit} type=\"submit\" />\n    </Form>;\n}\n\nexport default ConfigurationComponent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ConfigurableComponent from '../Components/ConfigurationComponent';\nimport { validateNumber } from '../utils/validation';\n\nclass ConfigurationContainer extends Component {\n\n    state = {\n        generation: 4,\n        cellSize: 40,\n        boardSize: 400\n    };\n\n    componentDidMount(){\n        this.setState(this.props.config)\n    }\n    \n    handleChangeValue = e => {\n        this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n    }\n\n    handleSubmit = e => {\n        // Validate state object before sending it to redux store\n        if(\n            validateNumber(Number(this.state.generation)) && \n            validateNumber(Number(this.state.cellSize)) > 0 && \n            validateNumber(Number(this.state.boardSize)) > 0) {\n            // Update redux store with new configuration values\n            this.props.setConfig({\n                generation: Number(this.state.generation),\n                cellSize: Number(this.state.cellSize),\n                boardSize: Number(this.state.boardSize)\n            })\n        }\n        e.preventDefault();\n    }\n\n    render() {\n        const {\n            config\n        } = this.props;\n        return <ConfigurableComponent \n                    state={this.state} \n                    config={config}\n                    handleChangeValue={this.handleChangeValue.bind(this)}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                />\n    }\n\n}\n\n// Validate Component Props \nConfigurationContainer.propTypes = {\n    config: PropTypes.object\n};\n\n\nexport default ConfigurationContainer;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { setConfig } from './Redux/Actions';\nimport BoardContainer from './Containers/BoardContainer';\nimport ConfigurationContainer from './Containers/ConfigurationContainer';\nimport styled from 'styled-components';\nimport WebFont from 'webfontloader';\n\nconst AppWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin: 5% auto;\n    width: 50%;\n    font-family: 'Montserrat', sans-serif;\n`;\n\nclass App extends Component {\n    render() {\n        WebFont.load({\n            google: {\n                families: ['Montserrat:wght@100', 'sans-serif']\n            }\n        });\n        const {\n            config,\n            setConfig\n        } = this.props;\n        return <AppWrapper>\n            <ConfigurationContainer config={config} setConfig={setConfig} />\n            <BoardContainer config={config} />\n        </AppWrapper>;\n    }\n}\n\n// Validate Component Props \nApp.propTypes = {\n    config: PropTypes.object,\n    setConfig: PropTypes.func\n};\n\n// Connect our main component to redux store\nconst mapStateToProps = ({config, states}) => ({config, states});\nconst mapDispatchToProps = dispatch => bindActionCreators( {setConfig}, dispatch);\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import { Types } from './Actions'\n\nexport const InitialState = {\n    config: {\n        generation: 4,\n        cellSize: 40,\n        boardSize: 400\n    }\n}\n\nexport default function reducer (state = InitialState, action) {\n    switch (action.type) {\n        case Types.SET_CONFIG:\n            return {\n                ...state,\n                ...{ config: action.config }\n            }\n        default:\n            return state\n    }\n}","import { createStore } from 'redux';\nimport reducer from './Reducers';\n\n// mount it on the Store\nconst store = createStore(reducer);\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport history from \"./Redux/History\";\nimport { Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './Redux/Store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}