{"version":3,"sources":["Redux/Actions.js","Components/BoardComponent.js","Containers/BoardContainer.js","utils/validation.js","Components/Form/InputText/index.js","Components/ConfigurationComponent.js","Containers/ConfigurationContainer.js","App.js","Redux/History.js","Redux/Reducers.js","Redux/Store.js","reportWebVitals.js","index.js"],"names":["Types","setConfig","config","type","setLoader","isLoading","Row","styled","div","props","height","width","Cell","background","Button","a","renderTable","boardSize","cellSize","cols","rows","grid","arr","Array","i","length","buildTwoDimensionalArray","j","Math","round","random","drawATable","map","row","cell","BoardComponent","useState","setGrid","generation","onClick","k","setTimeout","startIterations","BoardWrapper","BoardContainer","state","this","setState","Component","validateNumber","input","test","InputWrapper","InputLabel","label","InputText","ValidationText","span","validation","field","value","FormTextInput","labelText","id","placeholder","onChange","htmlFor","name","Form","form","ConfigurationComponent","handleChangeValue","handleSubmit","ConfigurationContainer","e","currentTarget","isIntegers","Number","isBoardSizeGreaterThanCellsSize","isCellsSizeMultipleOfBoardSize","preventDefault","bind","Content","App","WebFont","load","google","families","style","connect","dispatch","bindActionCreators","createBrowserHistory","InitialState","store","createStore","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","history","document","getElementById"],"mappings":"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","file":"static/js/main.c85c9c51.chunk.js","sourcesContent":["// Define redux action type and export it\nexport const Types = {  \n    SET_CONFIG: 'SET_CONFIG',\n    SET_LOADER: 'SET_LOADER',\n}\n\n// Define an action that will configuration state\nexport const setConfig = config => ({ type: Types.SET_CONFIG, config });\n\nexport const setLoader = isLoading => ({ type: Types.SET_LOADER, isLoading });","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Row = styled.div`\n    padding: 0;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n`;\n\nconst Cell = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    display: inline-block;\n    width: ${props => props.width};\n    height: ${props => props.height};\n    text-align: center;\n    span {\n        display: inline-block;\n    }\n    ${({ background }) => background && `\n        background-color: #000;\n    `}\n`;\n\nconst Button = styled.a`\n    background-color: #f62459;\n    color: #fff;\n    padding: 10px;\n    margin: 10px 0;\n    display: inline-block;\n    cursor: pointer;\n`;\n\nconst buildTwoDimensionalArray = (cols, rows) => {\n    let arr = new Array(cols);\n    for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(rows); \n    }\n    return arr;\n}\n\nconst renderTable = (boardSize, cellSize) => {\n    const cols = boardSize / cellSize;\n    const rows = boardSize / cellSize;\n    let grid = buildTwoDimensionalArray(cols, rows);\n    for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n            grid[i][j] = Math.round(Math.random());\n        }\n    }\n    return drawATable(cellSize, boardSize, grid);\n}\n\nconst drawATable = (cellSize, boardSize, grid) => {\n    let table = grid.map((row, i) => {\n        return <Row height={`${cellSize}px`} width={`${boardSize}px`} key={i}>{\n            row.map((cell, j) => {\n                return <Cell key={j} background={grid[i][j] === 1} width={`${cellSize}px`} height={`${cellSize}px`}></Cell>;\n            })\n        }</Row>\n    });\n    return table;\n}\n\nconst startIterations = (setGrid, generation, boardSize, cellSize) => {\n    for (let k = 0; k < generation; k++) {\n        (function() {\n            let j = k;\n            setTimeout(() => {\n                setGrid(renderTable(boardSize, cellSize));\n            }, 1000 * (j + 1));\n        })();\n    }\n};\n\nconst BoardComponent = ({config}) => {\n    const [grid, setGrid] = useState([]);\n    const {\n        boardSize,\n        cellSize,\n        generation\n    } = config;\n    return <Fragment>\n        <Button onClick={() => startIterations(setGrid, generation, boardSize, cellSize)}>\n            Start Iteration\n        </Button>\n        {grid && grid.length > 0 ? grid : renderTable(boardSize, cellSize)}\n    </Fragment>;\n}\n\nexport default BoardComponent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport BoardComponent from '../Components/BoardComponent';\n\nconst BoardWrapper = styled.div`\n    width: 400px;\n    height: 400px;\n    padding: 0;\n`;\n\nclass BoardContainer extends Component {\n\n    state = {\n        generation: 0,\n        cellSize: 0,\n        boardSize: 0\n    }\n    \n    componentDidMount(){\n        this.setState(this.props.config)\n    }\n\n    render() {\n        return <BoardWrapper>\n                    { this.state.boardSize && \n                        <BoardComponent \n                            config={this.props.config}\n                        /> \n                    }\n                </BoardWrapper>;\n    }\n    \n}\n\n// Validate Component Props \nBoardContainer.propTypes = {\n    config: PropTypes.object,\n    setConfig: PropTypes.func\n};\n\n\nexport default BoardContainer;","export const validateNumber = input => {\n    const re = /^[1-9]\\d*$/;\n    return re.test(input);\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { validateNumber } from '../../../utils/validation';\n\nconst InputWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 15px 0;\n    width: 200px;\n`;\n\nconst InputLabel = styled.label`\n    font-size: 14px;\n    font-weight: 500;\n    margin: 5px 0;\n    display: inline-block;\n`;\n\nconst InputText = styled.input`\n    background: rgb(255, 255, 255);\n    border-radius: 2px;\n    border: 1px solid rgb(217, 217, 217);\n    height: 32px;\n    padding: 0 6px;\n`;\n\nconst ValidationText = styled.span`\n    color: #900;\n    display: inline-block;\n    margin: 8px 0;\n    font-size: 13px;\n`;\n\nconst validation = (field, value, state) => {\n    const {\n        boardSize,\n        cellSize\n    } = state;\n    if(field === 'generation' && !validateNumber(value)) {\n        return <ValidationText>Invalid generation</ValidationText>\n    }\n    if(field === 'cellSize') {\n        if(value > boardSize) {\n            return <ValidationText>Cells' size should be less than the size of the board.</ValidationText>\n        }\n        if(!validateNumber(value)) {\n            return <ValidationText>Invalid cell size</ValidationText>\n        }\n        if(boardSize % value !== 0) {\n            return <ValidationText>Cell size should be a multiple of a board size e.g 40 and 400</ValidationText>\n        }\n    }\n    if(field === 'boardSize') {\n        if(value < cellSize) {\n            return <ValidationText>Board size should be greater than the cells' size.</ValidationText>\n        }\n        if(!validateNumber(value)) {\n            return <ValidationText>Invalid board size</ValidationText>\n        }\n        if(value % cellSize !== 0) {\n            return <ValidationText>Board size should be a multiple of a cell size e.g 400 and 40</ValidationText>\n        }\n    }\n    return ``;\n}\n\nconst FormTextInput = props => {\n    const {\n        labelText,\n        id,\n        placeholder,\n        value,\n        onChange,\n        state\n    } = props;\n    return (\n        <InputWrapper>\n            <InputLabel htmlFor={id}>{labelText}</InputLabel>\n            <InputText \n                type=\"number\" \n                onChange={onChange}\n                value={value}\n                placeholder={placeholder} \n                id={id} \n                name={id}\n            />\n            {validation(id, value, state)}\n        </InputWrapper>\n    );\n};\n\nFormTextInput.propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    id: PropTypes.string,\n    labelText: PropTypes.string\n};\n\nexport default FormTextInput;","import React from 'react';\nimport TextInput from './Form/InputText';\nimport styled from 'styled-components';\n\nconst Form = styled.form`\n    padding: 0;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n`;\n\nconst Button = styled.input`\n    padding: 10px;\n    margin: 0;\n    height: ${props => props.height};\n    width: ${props => props.width};\n    background-color: #000;\n    color: #fff;\n    border: none;\n    &:focus {\n        outline:0;\n        outline: none;\n    }\n`;\n\nconst ConfigurationComponent = ({state, handleChangeValue, handleSubmit, isLoading}) => {\n    return <Form>\n        <TextInput\n            labelText=\"Generations (1-8):\"\n            id=\"generation\"\n            value={state.generation}\n            name=\"generation\"\n            onChange={handleChangeValue}\n            state={state}\n        />\n        <TextInput\n            labelText=\"Cell Size\"\n            id=\"cellSize\"\n            value={state.cellSize}\n            name=\"cellSize\"\n            onChange={handleChangeValue}\n            state={state}\n        />\n        <TextInput\n            labelText=\"Board Size:\"\n            id=\"boardSize\"\n            value={state.boardSize}\n            name=\"boardSize\"\n            onChange={handleChangeValue}\n            state={state}\n        />\n        <Button id=\"submit\" value={`${ isLoading ? \"Saving...\" : \"Save Settings\" }`} onClick={handleSubmit} type=\"submit\" />\n    </Form>;\n}\n\nexport default ConfigurationComponent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ConfigurableComponent from '../Components/ConfigurationComponent';\nimport { validateNumber } from '../utils/validation';\n\nclass ConfigurationContainer extends Component {\n\n    state = {\n        generation: 4,\n        cellSize: 40,\n        boardSize: 400\n    };\n\n    componentDidMount(){\n        this.setState(this.props.config)\n    }\n    \n    handleChangeValue = e => {\n        this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n    }\n\n    handleSubmit = e => {\n        this.props.setLoader(true);\n        // Validate state object before sending it to redux store\n        const isIntegers = validateNumber(Number(this.state.generation)) > 0 && validateNumber(Number(this.state.cellSize)) > 0 && \n        validateNumber(Number(this.state.boardSize)) > 0;\n        const isBoardSizeGreaterThanCellsSize = Number(this.state.boardSize) > Number(this.state.cellSize);\n        const isCellsSizeMultipleOfBoardSize = Number(this.state.boardSize) % Number(this.state.cellSize) === 0 || false;\n        if(isIntegers && isBoardSizeGreaterThanCellsSize && isCellsSizeMultipleOfBoardSize) {\n            // Update redux store with new configuration values\n            this.props.setConfig({\n                generation: Number(this.state.generation),\n                cellSize: Number(this.state.cellSize),\n                boardSize: Number(this.state.boardSize)\n            });\n            setTimeout(()=>{\n                this.props.setLoader(false);\n            }, 1000);\n        }\n        e.preventDefault();\n    }\n\n    render() {\n        const {\n            config,\n            isLoading\n        } = this.props;\n        return <ConfigurableComponent \n                    state={this.state} \n                    config={config}\n                    isLoading={isLoading}\n                    handleChangeValue={this.handleChangeValue.bind(this)}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                />\n    }\n\n}\n\n// Validate Component Props \nConfigurationContainer.propTypes = {\n    config: PropTypes.object\n};\n\n\nexport default ConfigurationContainer;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { setConfig, setLoader } from './Redux/Actions';\nimport BoardContainer from './Containers/BoardContainer';\nimport ConfigurationContainer from './Containers/ConfigurationContainer';\nimport styled from 'styled-components';\nimport WebFont from 'webfontloader';\n\nconst Content = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin: 5% auto;\n    width: 50%;\n    font-family: 'Montserrat', sans-serif;\n`;\n\nclass App extends Component {\n    render() {\n        WebFont.load({\n            google: {\n                families: ['Montserrat:wght@100', 'sans-serif']\n            }\n        });\n        const {\n            config,\n            setConfig,\n            isLoading,\n            setLoader\n        } = this.props;\n        return <div style={{\n            'text-align': 'center',\n        }}>\n            <p style={{\n                'margin': '1% auto',\n                'width': '50%',\n                'font-family': \"'Montserrat', sans-serif\"\n            }}>\n                The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.[1] It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves ~ Wikipedia.\n            </p>\n            <Content>\n                <ConfigurationContainer setLoader={setLoader} isLoading={isLoading} config={config} setConfig={setConfig} />\n                <BoardContainer config={config} />\n            </Content>\n        </div>;\n    }\n}\n\n// Validate Component Props \nApp.propTypes = {\n    config: PropTypes.object,\n    setConfig: PropTypes.func\n};\n\n// Connect our main component to redux store\nconst mapStateToProps = ({config, isLoading}) => ({config, isLoading});\nconst mapDispatchToProps = dispatch => bindActionCreators( {setConfig, setLoader}, dispatch);\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import { Types } from './Actions'\n\nexport const InitialState = {\n    config: {\n        generation: 4,\n        cellSize: 40,\n        boardSize: 400\n    },\n    isLoading: false\n}\n\nexport default function reducer (state = InitialState, action) {\n    switch (action.type) {\n        case Types.SET_CONFIG:\n            return {\n                ...state,\n                ...{ config: action.config }\n            }\n        case Types.SET_LOADER:\n            return {\n                ...state,\n                ...{ isLoading: action.isLoading }\n            }\n        default:\n            return state\n    }\n}","import { createStore } from 'redux';\nimport reducer from './Reducers';\n\n// mount it on the Store\nconst store = createStore(reducer);\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport history from \"./Redux/History\";\nimport { Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './Redux/Store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}